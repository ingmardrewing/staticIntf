package staticIntf

import (
	"github.com/ingmardrewing/fs"
	"github.com/ingmardrewing/htmlDoc"
)

const (
	PAGES              = "pages"
	BLOG               = "blog"
	HOME               = "main"
	PORTFOLIO          = "portfolio"
	MARGINALS          = "marginal"
	NARRATIVES         = "narrative"
	NARRATIVEMARGINALS = "narrativeMarginal"
)

type PagesContainerTool interface {
	GetIndexOfPage(Page) int
	GetIndexOfNaviPage(Page) int
	GetLastPage(Page) Page
	GetFirstPage(Page) Page
	GetPageBefore(Page) Page
	GetPageAfter(Page) Page
	SiblingPages(Page) []Page
}

type Image interface {
	W190() string
	W390() string
	W800() string
	MaxResoultion() string
	Title() string
}

type PageDto interface {
	Id() int
	Title() string
	TitlePlain() string
	ThumbUrl() string
	MicroThumbUrl() string
	ImageUrl() string
	Description() string
	CreateDate() string
	Content() string
	Category() string
	PathFromDocRoot() string
	FsPath() string
	HtmlFilename() string
	ThumbBase64() string
	Tags() []string
	Images() []Image
}

type ConfigContainer interface {
	Domain() string
	SvgLogo() string
	BasePath() string
	TwitterHandle() string
	Topic() string
	Tags() string
	CardType() string
	Section() string
	FBPage() string
	TwitterPage() string
	RssPath() string
	RssFilename() string
	Css() string
	TargetDir() string
	HomeText() string
	HomeHeadline() string
}

type LocationContainer interface {
	AddMain(Location)
	Main() []Location
	AddMarginal(Location)
	Marginal() []Location
}

type PagesContainer interface {
	Pages() []Page
	NaviPages() []Page
	Representationals() []Page

	AddPage(Page)
	AddRepresentational(Page)
	AddNaviPage(Page)

	Variant() string
	Headline() string
}

type PagesContainerCollection interface {
	AddContainer(PagesContainer)
	Containers() []PagesContainer
}

type PagesContainerCollectionTool interface {
	ContainersOrderedByVariants(...string) []PagesContainer
	GetPagesByVariant(string) []Page
	GetNaviPagesByVariant(string) []Page
}

type Site interface {
	ConfigContainer
	LocationContainer
	PagesContainerCollection
}

type Context interface {
	RenderPages() []fs.FileContainer
	GetComponents() []Component
}

type Renderer interface {
	AddComponents(...Component)
	Components() []Component

	Pages(...Page) []Page

	Render() []fs.FileContainer
}

type Location interface {
	Domain() string
	PathFromDocRoot() string
	HtmlFilename() string

	Title() string
	ThumbnailUrl() string
	MicroThumbnailUrl() string
	ExternalLink() string

	// Complete Url including protocol, domain, port (if any),
	// path from docroot and filename.
	// Derived from other fields of Location.
	Url() string

	// Compose path from doc root including
	// the filename.
	PathFromDocRootWithName() string
}

type PageContent interface {
	Id() int
	PublishedTime(...string) string
	Description() string
	Content() string
	ImageUrl() string
	ThumbBase64() string
	Category() string
	GetDoc() *htmlDoc.HtmlDoc
}

type Page interface {
	Location
	PageContent

	// The accepted visitor will be reading
	// from the page. See also:
	// https://en.wikipedia.org/wiki/Visitor_pattern
	AcceptVisitor(v Component)

	// When rendered, the html from the paramter
	// nodes will be added to the body of the
	// resulting html document.
	AddBodyNodes([]*htmlDoc.Node)

	// When rendered, the html from the parameter
	// nodes will be added to the body of the
	// resulting html document.
	AddHeaderNodes([]*htmlDoc.Node)

	// Used when rendering pages, which themselves
	// serve navigational purposes. For example
	// a page listing links to other pages, like
	// blogposts:
	NavigatedPages(...Page) []Page

	// A reference to the site containing
	// the page in question
	Site() Site

	// Return the Link with Domain
	Link() string

	// Returns the PagesContainer containing the given page
	Container(...PagesContainer) PagesContainer
}

type Component interface {

	// The Method preparing the
	// html nodes generated by the component
	// with data from the page it visits. See:
	// https://en.wikipedia.org/wiki/Visitor_pattern
	VisitPage(Page)

	// Returns the CSS defined for and by
	// the component, so it can be gathered
	// into a common css file shared by
	// all rendered (and relevant) html files.
	GetCss() string

	// Returns the JavaScript defined for and by
	// the component, so it can be gathered
	// into a common css file shared by
	// all rendered (and relevant) html files.
	GetJs() string
}
